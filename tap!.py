# -*- coding: utf-8 -*-
"""TAP!.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1buMk7-a4thIh43fCAj_g53Y8XXNHkES6

# TAP! üê±‚Äçüëì        by remuechat
---

TAP! Or "Tic-tac-toe Array Practice" is a python console game of tic tac toe. Will integrate ML and advanced algorithms later. I made this project to practice array manipulation and basic neural networks. Run the first cell of code to run the game! Good luck! üéâ [HOURS SPENT:11]
"""

#%%timeit or %time it, and time
!pip install emoji
import pickle; import time; import emoji

defaultBoard = [0,0,0,0,0,0,0,0,0]
p1, p2 = '','' 
convertedBoard = []
winText = ' '

def main():
    print("\nLet's start playing tic-tac-toe!  \n")
    askVariation()
    global pboard; pboard = defaultBoard
    
    win = False
    while win == False:
      display()
      p1 = str(input('PLAYER 1 move: '))
      if p1 == 'A1':
        pboard.pop(0)
        pboard.insert(0,1)
      elif p1 == 'A2':
        pboard.pop(1)
        pboard.insert(1,1)
      elif p1 == 'A3':
        pboard.pop(2)
        pboard.insert(2,1)
      elif p1 == 'B1':
        pboard.pop(3)
        pboard.insert(3,1)
      elif p1 == 'B2':
        pboard.pop(4)
        pboard.insert(4,1)
      elif p1 == 'B3':
        pboard.pop(5)
        pboard.insert(5,1)
      elif p1 == 'C1':
        pboard.pop(6)
        pboard.insert(6,1)
      elif p1 == 'C2':
        pboard.pop(7)
        pboard.insert(7,1)
      elif p1 == 'C3':
        pboard.pop(8)
        pboard.insert(8,1)
      display()
      p2 = str(input('PLAYER 2 move: '))
      if p2 == 'A1':
        pboard.pop(0)
        pboard.insert(0,2)
      elif p2 == 'A2':
        pboard.pop(1)
        pboard.insert(1,2)
      elif p2 == 'A3':
        pboard.pop(2)
        pboard.insert(2,2)
      elif p2 == 'B1':
        pboard.pop(3)
        pboard.insert(3,2)
      elif p2 == 'B2':
        pboard.pop(4)
        pboard.insert(4,2)
      elif p2 == 'B3':
        pboard.pop(5)
        pboard.insert(5,2)
      elif p2 == 'C1':
        pboard.pop(6)
        pboard.insert(6,2)
      elif p2 == 'C2':
        pboard.pop(7)
        pboard.insert(7,2)
      elif p2 == 'C3':
        pboard.pop(8)
        pboard.insert(8,2)
        #store the moves in a json file later, probably the time also in pushMove()
      if (pboard[0] == 1 and pboard[1] == 1 and pboard[2] == 1) or (pboard[3] == 1 and pboard[4] == 1 and pboard[5] == 1) or (pboard[6] == 1 and pboard[7] == 1 and pboard[8] == 1) or (pboard[0] == 1 and pboard[4] == 1 and pboard[8] == 1) or (pboard[2] == 1 and pboard[4] == 1 and pboard[6] == 1):
        win = True
        winText = 'Player 1 Wins!'
      elif (pboard[0] == 2 and pboard[1] == 2 and pboard[2] == 2) or (pboard[3] == 2 and pboard[4] == 2 and pboard[5] == 2) or (pboard[6] == 2 and pboard[7] == 2 and pboard[8] == 2) or (pboard[0] == 2 and pboard[4] == 2 and pboard[8] == 2) or (pboard[2] == 2 and pboard[4] == 2 and pboard[6] == 2): 
        win = True
        winText = 'Player 2 Wins!'
      else:
        win = False
    print(winText)
    display()

def askVariation():
  print('VARIATIONS: \n')
  print('AI             Play 3x3 board with AI')
  print('DF             Standard game, 2 players, 3 x 3 board')
  global size; size = str(input('GAME: '))
  print('To move, enter the texts to move: ')
  print('   A1        A2        A3')
  print('   B1        B2        B3')
  print('   C1        C2        C3')

def display():
  convertedBoard.clear()
  for i in range(len(pboard)):
    if pboard[i] == 0:
      convertedBoard.append('‚¨õ')
    elif pboard[i] == 1:
      convertedBoard.append('‚≠ï')
    elif pboard[i] == 2:
      convertedBoard.append('‚ùå')
  print()
  print(        convertedBoard[0], convertedBoard[1], convertedBoard[2]) 
  print(        convertedBoard[3], convertedBoard[4], convertedBoard[5])
  print(        convertedBoard[6], convertedBoard[7], convertedBoard[8])

#add the move recorder in the bottom cell

main()

#MACHINE LEARNING

#RECORD GAMEPLAY